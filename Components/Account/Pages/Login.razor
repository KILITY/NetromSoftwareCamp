@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using MyApplication.Entities
@rendermode InteractiveServer

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Elevation="0">@errorMessage</MudAlert>
            }
            <MudForm @ref="form" Model="Input" OnValidSubmit="LoginUser">
                <h2>Use a local account to log in.</h2>
                <MudDivider Class="my-2" />
                <MudTextField @bind-Value="Input.Email"
                              Label="Email"
                              For="@(() => Input.Email)"
                              Required="true"
                              RequiredError="Email is required"
                              Variant="Variant.Filled"
                              Margin="Margin.Normal"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Email"
                              Class="mb-3"
                              InputType="InputType.Email"
                              />
                <MudTextField @bind-Value="Input.Password"
                              Label="Password"
                              For="@(() => Input.Password)"
                              Required="true"
                              RequiredError="Password is required"
                              Variant="Variant.Filled"
                              Margin="Margin.Normal"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Lock"
                              Class="mb-3"
                              InputType="InputType.Password"
                              />
                <MudCheckBox T="bool" @bind-Checked="Input.RememberMe" Label="Remember me" Class="mb-3" />
                <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="w-100 mb-2">Log in</MudButton>
                <div>
                    <p>
                        <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink>
                    </p>
                    <p>
                        <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink>
                    </p>
                    <p>
                        <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
                    </p>
                </div>
            </MudForm>
        </section>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <MudDivider Class="my-2" />
            <ExternalLoginPicker/>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;
    private MudForm? form;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }
}