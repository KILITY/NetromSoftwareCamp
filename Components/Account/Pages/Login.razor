@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MyApplication.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="mud-container">
    <div class="mud-paper">
        <h2 class="mud-typography mud-typography-h4">Log in</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="mud-alert mud-alert-error">@errorMessage</div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="mud-validation-summary" />

            <div class="mud-form-field">
                <InputText @bind-Value="Input.Email"
                           id="Input.Email"
                           class="mud-input"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="Email" />
                <label for="Input.Email" class="mud-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="mud-validation-message" />
            </div>

            <div class="mud-form-field">
                <InputText type="password"
                           @bind-Value="Input.Password"
                           id="Input.Password"
                           class="mud-input"
                           autocomplete="current-password"
                           aria-required="true"
                           placeholder="Password" />
                <label for="Input.Password" class="mud-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="mud-validation-message" />
            </div>

            <div class="mud-checkbox-container">
                <InputCheckbox @bind-Value="Input.RememberMe" class="mud-checkbox" />
                <label class="mud-label">Remember me</label>
            </div>

            <button type="submit" class="mud-button mud-button-filled mud-button-primary">
                Log in
            </button>

            <div class="mud-links">
                <a href="/Account/ForgotPassword" class="mud-link">Forgot your password?</a>
                <a href="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })" class="mud-link">
                    Register as a new user
                </a>
                <a href="/Account/ResendEmailConfirmation" class="mud-link">Resend email confirmation</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}