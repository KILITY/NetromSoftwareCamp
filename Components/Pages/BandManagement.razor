@page "/BandsManagement"
@using MyApplication.Repositories
@using MudBlazor
@using MyApplication.Entities
@using MyApplication.Enums
@using MyApplication.Interfaces

@inject IRepositoryBand RepositoryBand
@inject IDialogService DialogService

<MudText Typo="Typo.h3" Align="Align.Center">Create Band</MudText>

<MudCard>
    <MudForm @ref="form" Model="@Band">
        <MudCardContent>
            <MudStack>
                <MudTextField @bind-Value="@Band.Name" Label="Name" Required="true" RequiredError="Name is required" />
                <MudSelect T="Genre" @bind-Value="@Band.Genre" Label="Genre" Required="true" RequiredError="Genre is required">
                    @foreach (Genre gen in Enum.GetValues(typeof(Genre)))
                    {
                        <MudSelectItem T="Genre" Value="@gen">@gen</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" @onclick="ValidateAndAddBand">Create Your Band!</MudButton>
            </MudStack>
        </MudCardContent>
    </MudForm>
</MudCard>

<MudText Typo="Typo.h3" Align="Align.Center">Band Table</MudText>

@if (!BandsExist)
{
    <h4>There are no Bands! Please contact an admin and tell him/her to do his/her job!</h4>
}
else
{
    @if (ShowAlert)
    {
        <MudAlert Severity="@AlertSeverity"
                  Elevation="0"
                  Dense="true"
                  Variant="Variant.Filled"
                  OnClose="() => ShowAlert = false">
            @AlertMessage
        </MudAlert>
    }
    <MudTable Items="@Bands" Filter="@FilterFunction">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search Band" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Genre</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Name">
                @if (EditingBand == context)
                {
                    <MudTextField @bind-Value="context.Name" Immediate="true"/>
                }
                else
                {
                    @context.Name
                }
            </MudTd>
            <MudTd DataLabel="Genre">
                @if (EditingBand == context)
                {
                    <MudSelect T="Genre" @bind-Value="context.Genre" Immediate="true">
                        @foreach (Genre gen in Enum.GetValues(typeof(Genre)))
                        {
                            <MudSelectItem T="Genre" Value="@gen">@gen</MudSelectItem>
                        }
                    </MudSelect>
                }
                else
                {
                    @context.Genre
                }
            </MudTd>
            <MudTd>
                @if (EditingBand == context)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="() => SaveEdit(context)"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Secondary" OnClick="CancelEdit"/>
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => StartEdit(context)"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => ShowDeleteConfirmationDialog(context)"/>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private IEnumerable<Band> Bands = new List<Band>();
    private string? AlertMessage;
    private Severity AlertSeverity;
    private bool ShowAlert;
    private bool BandsExist = false;
    private string _searchString = "";
    private Band? EditingBand;
    private MudForm form;

    public Band Band { get; set; } = new Band()
    {
        Name = string.Empty,
        Genre = 0,
    };

    protected override async Task OnInitializedAsync()
    {
        Bands = (await RepositoryBand.GetAllAsync()).ToList();
        BandsExist = Bands.Any();
    }

    private bool FilterFunction(Band band)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return band.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task ValidateAndAddBand()
    {
        await form.Validate();
        if (form.IsValid)
        {
            await AddBand();
        }
        else
        {
            ShowAlert = true;
            AlertMessage = "Please fill in all required fields correctly.";
            AlertSeverity = Severity.Warning;
        }
    }

    private async Task AddBand()
    {
        try
        {
            await RepositoryBand.AddASync(Band);
            await RepositoryBand.SaveChangesAsync(Band);

            ShowAlert = true;
            AlertMessage = $"Created band '{Band.Name}' successfully.";
            AlertSeverity = Severity.Success;

            Band = new Band() { Name = "", Genre = 0 };
            Bands = (await RepositoryBand.GetAllAsync()).ToList();
            BandsExist = Bands.Any();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowAlert = true;
            AlertMessage = $"Error adding band: {ex.Message}";
            AlertSeverity = Severity.Error;
        }
    }

    private async Task DeleteBand(Band band)
    {
        try
        {
            RepositoryBand.Delete(band);
            await RepositoryBand.SaveChangesAsync(band);

            ShowAlert = true;
            AlertMessage = $"Deleted band '{band.Name}' successfully.";
            AlertSeverity = Severity.Success;

            Bands = (await RepositoryBand.GetAllAsync()).ToList();
            BandsExist = Bands.Any();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowAlert = true;
            AlertMessage = $"Error deleting band: {ex.Message}";
            AlertSeverity = Severity.Error;
        }
    }

    private void StartEdit(Band band)
    {
        EditingBand = band;
    }

    private void CancelEdit()
    {
        EditingBand = null;
    }

    private async Task SaveEdit(Band band)
    {
        RepositoryBand.Update(band);
        await RepositoryBand.SaveChangesAsync(band);

        EditingBand = null;

        ShowAlert = true;
        AlertMessage = $"Updated band '{band.Name}' successfully.";
        AlertSeverity = Severity.Success;

        Bands = (await RepositoryBand.GetAllAsync()).ToList();
        StateHasChanged();
    }
    
    private async Task ShowDeleteConfirmationDialog(Band band)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete '{band.Name}'?" }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = false,
        };

        var dialog = DialogService.Show<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteBand(band);
        }
    }
}