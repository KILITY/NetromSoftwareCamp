@page "/book/{FestivalId:guid}"
@using Microsoft.AspNetCore.Components.Authorization
@using MyApplication.Entities
@using MyApplication.Interfaces
@inject IRepositoryFestival FestivalRepository
@inject IRepositoryBooking BookingRepository
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Booking</h3>

<MudPaper Class="pa-4" Elevation="2" Style="margin:auto; max-width:500px;">
    <EditForm Model="@bookingModel">
        <MudStack Spacing="2">
            <MudAutocomplete T="Festival"
                             Label="Select Festival"
                             @bind-Value="selectedFestival"
                             @bind-Value:event="OnFestivalChanged"
                             ToStringFunc="f => f?.Name"
                             SearchFunc="SearchFestivals"
                             ResetValueOnEmptyText="true"
                             Clearable="true"
                             Required="true"
                             Disabled="FestivalId != Guid.Empty" />

            @if (selectedFestival != null)
            {
                <MudCard>
                    <MudCardMedia Image="@selectedFestival.URl" Style="height: 180px;" />
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@selectedFestival.Name</MudText>
                        <MudText Typo="Typo.body2">@selectedFestival.Description</MudText>
                        <MudText Typo="Typo.body2">@selectedFestival.Location</MudText>
                        <MudText Typo="Typo.body2">Price: @selectedFestival.Price â‚¬</MudText>
                        <MudText Typo="Typo.body2">
                            Time: @selectedFestival.StartDate?.ToString("dd-MM-yyyy") - @selectedFestival.EndDate?.ToString("dd-MM-yyyy")
                        </MudText>
                    </MudCardContent>
                </MudCard>
            }

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="!CanBook"
                       OnClick="ConfirmBooking">
                Confirm Booking
            </MudButton>
        </MudStack>
    </EditForm>
</MudPaper>

@code {
    [Parameter] public Guid FestivalId { get; set; }

    private Festival? selectedFestival;
    private List<Festival> allFestivals = new();
    private MyApplication.Entities.Booking bookingModel = new MyApplication.Entities.Booking();

    protected override async Task OnInitializedAsync()
    {
        allFestivals = (await FestivalRepository.GetAllAsync()).ToList();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        bookingModel.Email = user.Identity?.IsAuthenticated == true
            ? user.Identity.Name
            : string.Empty;

        if (FestivalId != Guid.Empty)
        {
            selectedFestival = await FestivalRepository.GetByIdAsync(FestivalId);
            SetBookingFromFestival();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (FestivalId != Guid.Empty)
        {
            selectedFestival = await FestivalRepository.GetByIdAsync(FestivalId);
            SetBookingFromFestival();
        }
    }

    private async Task<IEnumerable<Festival>> SearchFestivals(string value, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(value))
            return allFestivals;
        return allFestivals.Where(f => f.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task OnFestivalChanged(Festival? festival)
    {
        if (festival == null)
        {
            selectedFestival = null;
            bookingModel.FestivalId = Guid.Empty;
            return;
        }

        selectedFestival = allFestivals.FirstOrDefault(f => f.Id == festival.Id);

        if (selectedFestival != null)
        {
            bookingModel.FestivalId = selectedFestival.Id;
            SetBookingFromFestival();
        }
        else
        {
            bookingModel.FestivalId = Guid.Empty;
        }

        StateHasChanged();
    }

    private void SetBookingFromFestival()
    {
        if (selectedFestival == null) return;

        bookingModel.FestivalId = selectedFestival.Id;
        bookingModel.StartDate = selectedFestival.StartDate ?? DateTime.Now;
        bookingModel.EndDate = selectedFestival.EndDate ?? DateTime.Now;
        // Set other Booking properties from Festival as needed
    }

    private bool CanBook => selectedFestival != null && !string.IsNullOrWhiteSpace(bookingModel.Email);

    private async Task ConfirmBooking()
    {
        Console.WriteLine("ConfirmBooking: Starting booking confirmation process...");

        if (selectedFestival == null || !allFestivals.Any(f => f.Id == selectedFestival.Id))
        {
            Snackbar.Add("Selected festival does not exist.", Severity.Error);
            Console.WriteLine("ConfirmBooking: Invalid festival selected.");
            return;
        }

        // Check for existing booking
        var existingBookings = await BookingRepository.GetAllAsync();
        bool alreadyBooked = existingBookings.Any(b =>
            b.FestivalId == selectedFestival.Id &&
            string.Equals(b.Email, bookingModel.Email, StringComparison.OrdinalIgnoreCase));

        if (alreadyBooked)
        {
            Snackbar.Add("You have already booked for this festival.", Severity.Warning);
            Console.WriteLine("ConfirmBooking: Duplicate booking attempt.");
            return;
        }

        Console.WriteLine($"ConfirmBooking: Booking for festival '{selectedFestival.Name}' ({selectedFestival.Id}) by '{bookingModel.Email}'.");

        await BookingRepository.AddASync(bookingModel);
        Console.WriteLine("ConfirmBooking: Booking added to repository.");

        await BookingRepository.SaveChangesAsync(bookingModel);
        Console.WriteLine("ConfirmBooking: Changes saved to database.");

        Snackbar.Add("Booking confirmed!", Severity.Success);

        bookingModel = new MyApplication.Entities.Booking
        {
            Email = bookingModel.Email // preserve user email
        };

        Console.WriteLine("ConfirmBooking: Booking model reset. Navigating to home.");
        NavigationManager.NavigateTo("/");
    }
}