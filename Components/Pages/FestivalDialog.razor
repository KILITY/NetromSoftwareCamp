@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using MyApplication.Entities
@using MyApplication.Interfaces
@using MudBlazor
@inject IRepositoryBand RepositoryBand
@inject IRepositoryBandFestival RepositoryBandFestival
@inject IRepositoryFestival RepositoryFestival
@inject IDialogService DialogService
@inject NavigationManager Navigation

<div class="mud-container">
    <div class="mud-paper" style="max-width:500px;margin:auto;">
        <h2 class="mud-typography mud-typography-h4 mud-text-center mb-4">Festival Details</h2>

        <div class="mud-form-field mud-text-center mb-3">
            <MudImage Src="@festival.URl" Rounded="true" Style="max-width: 100%; height: auto;" />
        </div>

        <div class="mud-form-field">
            <span class="mud-label">Name</span>
            <div class="mud-typography mud-typography-h6">@festival.Name</div>
        </div>

        <div class="mud-form-field">
            <span class="mud-label">Description</span>
            <div class="mud-typography mud-typography-body1">@festival.Description</div>
        </div>

        <div class="mud-form-field">
            <span class="mud-label">Location</span>
            <div class="mud-typography mud-typography-body1">@festival.Location</div>
        </div>

        <div class="mud-form-field">
            <span class="mud-label">Time Frame</span>
            <div class="mud-typography mud-typography-body1 d-flex justify-center align-center gap-2">
                <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                    @(Convert.ToDateTime(festival.StartDate).ToString("dd-MM-yyyy"))
                </MudChip>
                <span>to</span>
                <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                    @(Convert.ToDateTime(festival.EndDate).ToString("dd-MM-yyyy"))
                </MudChip>
            </div>
        </div>

        @if (lineUp != null && lineUp.Count > 0)
        {
            <div class="mud-form-field">
                <span class="mud-label">Line-up</span>
                <MudList T="Band">
                    @foreach (var band in lineUp)
                    {
                        <MudListItem T="Band">@band.Name</MudListItem>
                    }
                </MudList>
            </div>
        }

        <div class="d-flex justify-center gap-2 mt-4">
            <button class="mud-button mud-button-filled mud-button-primary" @onclick="@(() => Navigation.NavigateTo($"/book/{festival.Id}"))">
                Book Now!
            </button>
            <button class="mud-button mud-button-filled" @onclick="Cancel">
                Cancel
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid FestivalID { get; set; }
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    private Festival festival { get; set; }
    private List<Band> lineUp { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (FestivalID != Guid.Empty)
        {
            festival = await RepositoryFestival.GetByIdAsync(FestivalID);
            lineUp = await RepositoryBandFestival.GetBandsByFestivalIdAsync(FestivalID);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}