@page "/FestivalManagement"
@using MyApplication.Repositories
@using MudBlazor
@using MyApplication.Entities
@using MyApplication.Enums
@using MyApplication.Interfaces

@inject IRepositoryFestival RepositoryFestival 
@inject ICloudinaryService CloudinaryService

<MudText Typo="Typo.h3" Align="Align.Center">CreateFestival</MudText>

<MudCard>
    <MudForm Rounded = "true" Model="@Festival">
        <MudCardContent>
            <MudStack>
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Upload Files
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                <MudTextField @bind-Value="@Festival.Name"
                              Label="Name"
                              Immediate="true">
                </MudTextField>
                <MudTextField @bind-Value="@Festival.Description"
                              Label="Description"
                              Immediate="true">
                </MudTextField>
                <MudTextField @bind-Value="@Festival.Location"
                              Label="Location"
                              Immediate="true">
                </MudTextField>
                <MudDatePicker Label="StartDate" @bind-Date="@Festival.StartDate" ShowToolbar="false"/>
                <MudDatePicker Label="EndDate" @bind-Date="@Festival.EndDate" ShowToolbar="false"/>

                <MudButton Variant="Variant.Filled" @onclick="AddFestival">Create Your Festival!</MudButton>
            </MudStack>
            </MudCardContent>
    </MudForm>
</MudCard>

@code {

    public Festival Festival { get; set; } = new Festival()
    {
        Name = string.Empty,
        Description = string.Empty,
        Location = string.Empty,
        StartDate = DateTime.Now,
        EndDate = DateTime.Now,
    };

    private async Task UploadFiles(IBrowserFile? file)
    {
        var results = await CloudinaryService.UploadPhotoAsync(file);
        foreach (var result in results)
        {
            Festival.URl = result.SecureUrl.AbsoluteUri;
            Festival.PublicId = result.PublicId;
        }
    }
    
    private async Task AddFestival()
    {
        try
        {
            await RepositoryFestival.AddASync(Festival);
            await RepositoryFestival.SaveChangesAsync(Festival);

            Festival = new Festival() { Name = "", Description = "", Location = "", StartDate = DateTime.Now, EndDate = DateTime.Now};
            
            Festivals = (await RepositoryFestival.GetAllAsync()).ToList();
            FestivalsExist = Festivals.Any();
            StateHasChanged();
            
            ShowAlert = true;
            AlertMessage = $"Created festival '{Festival.Name}' successfully.";
            AlertSeverity = Severity.Success;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding Festival: {ex.Message}");
        }
    }

}

<MudText Typo="Typo.h3" Align="Align.Center">Festival Table</MudText>

@if (!FestivalsExist)
{
    <h4>There are no Festivals! Please contact an admin and tell him/her to do his/her job!</h4>
}
else
{
    <MudTable Rounded = "true" Items="@Festivals.Take(4)" Filter="@FilterFunction" >
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search Festival" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Photo</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Location</MudTh>
            <MudTh>StartDate</MudTh>
            <MudTh>EndDate</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            
            <MudTd>
                <MudImage Src="@context.URl" 
                          Alt="Festival Image" 
                          Style="width: 50px; height: 50px; object-fit: cover;" 
                          Class="mud-image-rounded"/>
            </MudTd>
            
            <MudTd DataLabel="Name">
                @if (EditingFestival == context)
                {
                    <MudTextField @bind-Value="context.Name" Immediate="true"/>
                }
                else
                {
                    @context.Name
                }
            </MudTd>

            <MudTd DataLabel="Description">
                @if (EditingFestival == context)
                {
                    <MudTextField @bind-Value="context.Description" Immediate="true"/>
                }
                else
                {
                    @context.Description
                }
            </MudTd>
            
            <MudTd DataLabel="Location">
                @if (EditingFestival == context)
                {
                    <MudTextField @bind-Value="context.Location" Immediate="true"/>
                }
                else
                {
                    @context.Location
                }
            </MudTd>
            
            <MudTd DataLabel="StartDate">
                @if (EditingFestival == context)
                {
                    <MudDatePicker Label="StartDate" @bind-Date="@Festival.StartDate" ShowToolbar="false" />
                }
                else
                {
                    @context.StartDate
                }
            </MudTd>
            
            <MudTd DataLabel="EndDate">
                @if (EditingFestival == context)
                {
                    <MudDatePicker Label="EndDate" @bind-Date="@Festival.EndDate" ShowToolbar="false" />
                }
                else
                {
                    @context.EndDate
                }
            </MudTd>

            <MudTd>
                @if (EditingFestival == context)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="() => SaveEdit(context)"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Secondary" OnClick="CancelEdit"/>
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => StartEdit(context)"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteFestival(context)"/>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code { 
    private IEnumerable<Festival> Festivals= new List<Festival>();
    
    private string? AlertMessage;
    private Severity AlertSeverity;
    private bool ShowAlert;

    bool FestivalsExist = false;
    private string _searchString = "";

    private Festival? EditingFestival;
    
    protected override async Task OnInitializedAsync()
    {
        Festivals = (await RepositoryFestival.GetAllAsync()).ToList();
        FestivalsExist = Festivals.Any();

    }
    
    private bool FilterFunction(Festival festival)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return festival.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }
    
    private async Task DeleteFestival(Festival festival)
    {
        try
        {
            await CloudinaryService.DeletePhotoAsync(festival.PublicId);
            RepositoryFestival.Delete(festival);
            await RepositoryFestival.SaveChangesAsync(festival);

            IList<Festival> tempFestivals = Festivals.ToList();
            tempFestivals.Remove(festival);
            Festivals = tempFestivals;
            StateHasChanged();
            
            ShowAlert = true;
            AlertMessage = $"Deleted Festival '{festival.Name}' successfully.";
            AlertSeverity = Severity.Success;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting festival: {ex.Message}");
        }
    }

    private void StartEdit(Festival festival)
    {
        EditingFestival = festival;
    }

    private void CancelEdit()
    {
        EditingFestival = null;
    }

    private async Task SaveEdit(Festival festival)
    {
        RepositoryFestival.Update(festival);
        await RepositoryFestival.SaveChangesAsync(festival);

        EditingFestival = null;

        ShowAlert = true;
        AlertMessage = $"Updated festival '{festival.Name}' successfully.";
        AlertSeverity = Severity.Success;

        StateHasChanged();
    }
}

@if (ShowAlert)
{
    <MudAlert Footer = "True" Severity="@AlertSeverity"
              Elevation="0"
              Dense="true"
              Variant="Variant.Filled"
              OnClose="() => ShowAlert = false">
        @AlertMessage
    </MudAlert>
}